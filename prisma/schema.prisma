// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tournament {
  id                 Int                 @id @default(autoincrement())
  name               String
  logoUrl            String?
  tournamentEditions TournamentEdition[]
}

model TournamentEdition {
  id               Int             @id @default(autoincrement())
  year             Int
  yearAsString     String
  logoUrl          String?
  tournamentId     Int
  tournament       Tournament      @relation(fields: [tournamentId], references: [id])
  groups           Group[]
  knockoutMatches  KnockoutMatch[]
  matches          Match[]
  teams            Team[]
  hostingCountries Country[]
  winner           Team?           @relation("winnerTeam", fields: [winnerId], references: [id])
  winnerId         Int?
  titleHolder      Team?           @relation("titleHolderTeam", fields: [titleHolderId], references: [id])
  titleHolderId    Int?
}

model Group {
  id                  Int               @id @default(autoincrement())
  name                String
  tournamentEditionId Int
  tournamentEdition   TournamentEdition @relation(fields: [tournamentEditionId], references: [id])
  teams               Team[]
  matches             Match[]
}

model Team {
  id                            Int                 @id @default(autoincrement())
  name                          String
  flagUrl                       String?
  groups                        Group[]
  tournamentEdition             TournamentEdition[]
  tournamentEditionWinner       TournamentEdition[] @relation("winnerTeam")
  tournamentEditionTitleHolders TournamentEdition[] @relation("titleHolderTeam")
  matchesHome                   Match[]             @relation("homeTeam")
  matchesAway                   Match[]             @relation("awayTeam")
  knockoutMatchesHome           KnockoutMatch[]     @relation("homeTeam")
  knockoutMatchesAway           KnockoutMatch[]     @relation("awayTeam")
}

// model TeamsInGroups {
//   group    Group @relation(fields: [groupId], references: [id])
//   groupId  Int
//   team     Team  @relation(fields: [teamId], references: [id])
//   teamId   Int
//   teamRank Int?

//   @@id([groupId, teamId])
// }

model Country {
  id                 Int                 @id @default(autoincrement())
  name               String
  flagUrl            String?
  tournamentEditions TournamentEdition[]
}

model Match {
  id                  Int               @id @default(autoincrement())
  homeTeam            Team              @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId          Int
  awayTeam            Team              @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId          Int
  homeGoals           Int?
  awayGoals           Int?
  date                DateTime?
  groupId             Int
  group               Group             @relation(fields: [groupId], references: [id])
  tournamentEditionId Int
  tournamentEdition   TournamentEdition @relation(fields: [tournamentEditionId], references: [id])
  round               String?
}

model KnockoutMatch {
  id                  Int               @id @default(autoincrement())
  homeTeam            Team?             @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId          Int?
  awayTeam            Team?             @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId          Int?
  homeGoals           Int?
  awayGoals           Int?
  homeExtraTimeGoals  Int?
  awayExtraTimeGoals  Int?
  homePenaltyGoals    Int?
  awayPenaltyGoals    Int?
  date                DateTime?
  tournamentEditionId Int
  tournamentEdition   TournamentEdition @relation(fields: [tournamentEditionId], references: [id])
  round               String?
  homeTeamPlacehlder  String?
  awayTeamPlacehlder  String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
