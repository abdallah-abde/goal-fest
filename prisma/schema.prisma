// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  flagUrl   String?
  seasons   Season[]
  leagues   League[]
  Teams     Team[]
  code      String?
  continent String? // e.g., 'europe', 'asia' ...
}

model League {
  id         Int      @id @default(autoincrement())
  name       String
  countryId  Int?
  country    Country? @relation(fields: [countryId], references: [id])
  flagUrl    String?
  isDomestic Boolean  @default(false)
  isClubs    Boolean  @default(false)
  continent  String // e.g., 'international', 'europe', 'asia' ...
  seasons    Season[]
  isPopular  Boolean  @default(false)
}

model Season {
  id               Int       @id @default(autoincrement())
  startYear        Int
  endYear          Int
  year             String
  flagUrl          String?
  leagueId         Int
  league           League    @relation(fields: [leagueId], references: [id])
  teams            Team[]
  matches          Match[]
  winner           Team?     @relation("winnerTeams", fields: [winnerId], references: [id])
  winnerId         Int?
  titleHolder      Team?     @relation("titleHolderTeams", fields: [titleHolderId], references: [id])
  titleHolderId    Int?
  currentStage     String?
  slug             String    @unique
  groups           Group[]
  hostingCountries Country[]
}

model Group {
  id       Int     @id @default(autoincrement())
  name     String
  seasonId Int
  season   Season  @relation(fields: [seasonId], references: [id])
  teams    Team[]
  matches  Match[]
}

model Team {
  id           Int      @id @default(autoincrement())
  name         String
  flagUrl      String?
  seasons      Season[]
  matchesHome  Match[]  @relation("homeTeam")
  matchesAway  Match[]  @relation("awayTeam")
  winners      Season[] @relation("winnerTeams")
  titleHolders Season[] @relation("titleHolderTeams")
  groups       Group[]
  code         String?
  isPopular    Boolean  @default(false)
  isClub       Boolean  @default(false)
  continent    String?
  countryId    Int?
  country      Country? @relation(fields: [countryId], references: [id])

  players        Player[]
  matchStatsHome MatchStat[]    @relation("homeTeamStats")
  matchStatsAway MatchStat[]    @relation("awayTeamStats")
  lineups        Lineup[]
  substitutions  Substitution[]
  bookings       Booking[]
  goals          Goal[]
}

model Match {
  id                 Int       @id @default(autoincrement())
  homeTeam           Team?     @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId         Int?
  awayTeam           Team?     @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId         Int?
  homeGoals          Int?
  awayGoals          Int?
  homeExtraTimeGoals Int?
  awayExtraTimeGoals Int?
  homePenaltyGoals   Int?
  awayPenaltyGoals   Int?
  date               DateTime?
  seasonId           Int
  season             Season    @relation(fields: [seasonId], references: [id])
  round              String?
  isFeatured         Boolean   @default(false)
  status             String?
  groupId            Int?
  group              Group?    @relation(fields: [groupId], references: [id])
  isKnockout         Boolean   @default(false)
  homeTeamPlacehlder String?
  awayTeamPlacehlder String?

  stadiumId Int?
  stadium   Stadium? @relation(fields: [stadiumId], references: [id])

  attendance Int?

  refereeId Int?
  referee   Referee? @relation(fields: [refereeId], references: [id])

  homeFormation String?
  awayFormation String?

  matchStats    MatchStat[]
  lineups       Lineup[]
  substitutions Substitution[]
  bookings      Booking[]
  goals         Goal[]
}

model MatchStat {
  id Int @id @default(autoincrement())

  matchId Int
  match   Match @relation(fields: [matchId], references: [id])

  homeTeamId Int
  homeTeam   Team @relation("homeTeamStats", fields: [homeTeamId], references: [id])

  awayTeamId Int
  awayTeam   Team @relation("awayTeamStats", fields: [awayTeamId], references: [id])

  category String
  title    String

  homeTeamStat Float
  awayTeamStat Float
}

model Lineup {
  id Int @id @default(autoincrement())

  matchId Int
  match   Match @relation(fields: [matchId], references: [id])

  teamId Int
  team   Team @relation(fields: [teamId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])

  position String // Left Back, Left Wing ...etc 
  category String // Forwarders, Defenders, Midfielders or Goalkeepers

  isStarting Boolean @default(false)
  isMissing  Boolean @default(false)
  isBench    Boolean @default(false)
  isCoach    Boolean @default(false)
  goals      Int
}

model Substitution {
  id Int @id @default(autoincrement())

  matchId Int
  match   Match @relation(fields: [matchId], references: [id])

  teamId Int
  team   Team @relation(fields: [teamId], references: [id])

  playerInId Int
  playerIn   Player @relation("PlayerIn", fields: [playerInId], references: [id])

  playerOutId Int
  playerOut   Player @relation("PlayerOut", fields: [playerOutId], references: [id])

  minute      Int
  extraMinute Int @default(0)
}

model Booking {
  id Int @id @default(autoincrement())

  matchId Int
  match   Match @relation(fields: [matchId], references: [id])

  teamId Int
  team   Team @relation(fields: [teamId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])

  cardType    String // "yellow" or "red"
  minute      Int
  extraMinute Int    @default(0)
}

model Goal {
  id Int @id @default(autoincrement())

  matchId Int
  match   Match @relation(fields: [matchId], references: [id])

  teamId Int
  team   Team @relation(fields: [teamId], references: [id])

  playerId Int
  player   Player @relation(fields: [playerId], references: [id])

  isOwn       Boolean @default(false)
  minute      Int
  extraMinute Int     @default(0)
}

model Referee {
  id          Int     @id @default(autoincrement())
  name        String
  nationality String
  matches     Match[]
}

model Stadium {
  id       Int     @id @default(autoincrement())
  name     String
  city     String
  country  String
  capacity Int
  matches  Match[]
}

model Player {
  id       Int     @id @default(autoincrement())
  name     String
  category String
  position String
  ImageUrl String?

  teamId Int
  team   Team @relation(fields: [teamId], references: [id])

  lineups          Lineup[]
  substitutionsIn  Substitution[] @relation("PlayerIn")
  substitutionsOut Substitution[] @relation("PlayerOut")
  bookings         Booking[]
  goals            Goal[]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String                 @default("USER")
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
