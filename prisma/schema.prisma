// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tournament {
  id                 Int                 @id @default(autoincrement())
  name               String
  logoUrl            String?
  type               String // e.g., 'international', 'europe', 'asia' ...
  tournamentEditions TournamentEdition[]
  isPopular          Boolean             @default(false)
}

model TournamentEdition {
  id               Int             @id @default(autoincrement())
  startYear        Int
  endYear          Int
  year             String
  logoUrl          String?
  tournamentId     Int
  tournament       Tournament      @relation(fields: [tournamentId], references: [id])
  teams            Team[]
  matches          Match[]
  knockoutMatches  KnockoutMatch[]
  groups           Group[]
  hostingCountries Country[]
  winner           Team?           @relation("winnerTeam", fields: [winnerId], references: [id])
  winnerId         Int?
  titleHolder      Team?           @relation("titleHolderTeam", fields: [titleHolderId], references: [id])
  titleHolderId    Int?
  currentStage     String?
  slug             String          @unique
}

model Group {
  id                  Int               @id @default(autoincrement())
  name                String
  tournamentEditionId Int
  tournamentEdition   TournamentEdition @relation(fields: [tournamentEditionId], references: [id])
  teams               Team[]
  matches             Match[]
}

model Team {
  id                            Int                 @id @default(autoincrement())
  name                          String
  flagUrl                       String?
  tournamentEditions            TournamentEdition[]
  matchesHome                   Match[]             @relation("homeTeam")
  matchesAway                   Match[]             @relation("awayTeam")
  tournamentEditionWinners      TournamentEdition[] @relation("winnerTeam")
  tournamentEditionTitleHolders TournamentEdition[] @relation("titleHolderTeam")
  knockoutMatchesHome           KnockoutMatch[]     @relation("homeTeam")
  knockoutMatchesAway           KnockoutMatch[]     @relation("awayTeam")
  groups                        Group[]
  code                          String?
  isPopular                     Boolean             @default(false)
}

model Country {
  id                 Int                 @id @default(autoincrement())
  name               String
  flagUrl            String?
  tournamentEditions TournamentEdition[]
  leagues            League[]
  leagueTeams        LeagueTeam[]
  code               String?
  type               String? // e.g., 'international', 'europe', 'asia' ...
}

model Match {
  id                  Int               @id @default(autoincrement())
  homeTeam            Team              @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId          Int
  awayTeam            Team              @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId          Int
  homeGoals           Int?
  awayGoals           Int?
  date                DateTime?
  tournamentEditionId Int
  tournamentEdition   TournamentEdition @relation(fields: [tournamentEditionId], references: [id])
  round               String?
  isFeatured          Boolean           @default(false)
  groupId             Int
  group               Group             @relation(fields: [groupId], references: [id])
  status              String?
}

model KnockoutMatch {
  id                  Int               @id @default(autoincrement())
  homeTeam            Team?             @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId          Int?
  awayTeam            Team?             @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId          Int?
  homeGoals           Int?
  awayGoals           Int?
  homeExtraTimeGoals  Int?
  awayExtraTimeGoals  Int?
  homePenaltyGoals    Int?
  awayPenaltyGoals    Int?
  date                DateTime?
  tournamentEditionId Int
  tournamentEdition   TournamentEdition @relation(fields: [tournamentEditionId], references: [id])
  round               String?
  homeTeamPlacehlder  String?
  awayTeamPlacehlder  String?
  isFeatured          Boolean           @default(false)
  status              String?
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String                 @default("USER")
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model League {
  id        Int            @id @default(autoincrement())
  name      String
  countryId Int?
  country   Country?       @relation(fields: [countryId], references: [id])
  logoUrl   String?
  type      String // e.g., 'domestic', 'international', 'europe', 'asia' ...
  seasons   LeagueSeason[]
  isPopular Boolean        @default(false)
}

model LeagueSeason {
  id              Int                   @id @default(autoincrement())
  startYear       Int
  endYear         Int
  year            String
  logoUrl         String?
  leagueId        Int
  league          League                @relation(fields: [leagueId], references: [id])
  teams           LeagueTeam[]
  matches         LeagueMatch[]
  winner          LeagueTeam?           @relation("winnerLeagueTeam", fields: [winnerId], references: [id])
  winnerId        Int?
  titleHolder     LeagueTeam?           @relation("titleHolderLeagueTeam", fields: [titleHolderId], references: [id])
  titleHolderId   Int?
  currentStage    String?
  slug            String                @unique
  groups          LeagueGroup[]
  knockoutMatches LeagueKnockoutMatch[]
}

model LeagueMatch {
  id         Int          @id @default(autoincrement())
  homeTeam   LeagueTeam   @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId Int
  awayTeam   LeagueTeam   @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId Int
  homeGoals  Int?
  awayGoals  Int?
  date       DateTime?
  seasonId   Int
  season     LeagueSeason @relation(fields: [seasonId], references: [id])
  round      String?
  isFeatured Boolean      @default(false)
  status     String?
  groupId    Int?
  group      LeagueGroup? @relation(fields: [groupId], references: [id])
}

model LeagueKnockoutMatch {
  id                 Int          @id @default(autoincrement())
  homeTeam           LeagueTeam?  @relation("homeTeam", fields: [homeTeamId], references: [id])
  homeTeamId         Int?
  awayTeam           LeagueTeam?  @relation("awayTeam", fields: [awayTeamId], references: [id])
  awayTeamId         Int?
  homeGoals          Int?
  awayGoals          Int?
  homeExtraTimeGoals Int?
  awayExtraTimeGoals Int?
  homePenaltyGoals   Int?
  awayPenaltyGoals   Int?
  date               DateTime?
  seasonId           Int
  season             LeagueSeason @relation(fields: [seasonId], references: [id])
  round              String?
  homeTeamPlacehlder String?
  awayTeamPlacehlder String?
  isFeatured         Boolean      @default(false)
  status             String?
}

model LeagueTeam {
  id                     Int                   @id @default(autoincrement())
  name                   String
  flagUrl                String?
  seasons                LeagueSeason[]
  matchesHome            LeagueMatch[]         @relation("homeTeam")
  matchesAway            LeagueMatch[]         @relation("awayTeam")
  leagueTeamWinners      LeagueSeason[]        @relation("winnerLeagueTeam")
  leagueTeamTitleHolders LeagueSeason[]        @relation("titleHolderLeagueTeam")
  knockoutMatchesHome    LeagueKnockoutMatch[] @relation("homeTeam")
  knockoutMatchesAway    LeagueKnockoutMatch[] @relation("awayTeam")
  code                   String?
  groups                 LeagueGroup[]
  countryId              Int?
  country                Country?              @relation(fields: [countryId], references: [id])
  isPopular              Boolean               @default(false)
  type                   String?
}

model LeagueGroup {
  id       Int           @id @default(autoincrement())
  name     String
  seasonId Int
  season   LeagueSeason  @relation(fields: [seasonId], references: [id])
  teams    LeagueTeam[]
  matches  LeagueMatch[]
}
